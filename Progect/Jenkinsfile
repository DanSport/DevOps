pipeline {
  agent {
    kubernetes {
      // Описуємо pod з двома контейнерами: git-tools і kaniko
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins-sa
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: git-tools
      image: bitnami/git:2.45.2
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
"""
      // Усі shell-кроки за замовчуванням підуть у git-tools (там є git, sed, ssh)
      defaultContainer 'git-tools'
    }
  }

  environment {
    AWS_REGION    = 'us-east-1'
    ECR_URI       = '785434010839.dkr.ecr.us-east-1.amazonaws.com/lesson-7-ecr'
    APP_NAME      = 'django-app'
    GITOPS_BRANCH = 'main'   // пушимо в main
    VALUES_FILE   = 'Progect/charts/django-app/values.yaml'
    GIT_SSH_URL   = 'git@github.com:DanSport/DevOps.git'
  }

  stages {

    stage('Checkout') {
      steps {
        // Стандартний checkout (Multibranch підставить потрібну гілку)
        checkout scm

        // Інформативно: тепер git є → команда відпрацює
        sh '''
          set -euxo pipefail
          git --version
          git rev-parse --short HEAD || true
        '''
      }
    }

    stage('Build & Push (Kaniko)') {
      steps {
        container('kaniko') {
          sh '''
            set -euxo pipefail
            TAG="build-${BUILD_NUMBER}"
            /kaniko/executor \
              --context="$WORKSPACE" \
              --dockerfile=Dockerfile \
              --destination="${ECR_URI}:${TAG}" \
              --destination="${ECR_URI}:latest" \
              --cache=true --snapshotMode=redo
            echo "${TAG}" > .image_tag
          '''
        }
      }
    }

    stage('Bump Helm values & Push') {
      steps {
        container('git-tools') {
          sshagent (credentials: ['gitops-ssh']) {
            sh '''
              set -euxo pipefail

              # Додаємо github.com у known_hosts (щоб уникнути Host key verification failed)
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
              ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts

              TAG="$(cat .image_tag)"

              # Переходимо на гілку, куди пушимо (main), оновлюємо tag у values.yaml
              git remote set-url origin "${GIT_SSH_URL}"
              git fetch origin main
              git checkout main

              # Оновлюємо image.tag у values.yaml (GNU sed у цьому контейнері є)
              sed -i.bak -E "s#^(\\s*tag:\\s*).*#\\1${TAG}#g" "${VALUES_FILE}" && rm -f "${VALUES_FILE}.bak"

              git config user.email "ci@local"
              git config user.name  "jenkins-ci"
              git add "${VALUES_FILE}" || true
              git commit -m "ci: bump ${APP_NAME} image tag to ${TAG} [skip ci]" || echo "No changes to commit"
              git push origin main
            '''
          }
        }
      }
    }
  }

  post {
    success { echo '✅ Image pushed у ECR та values.yaml оновлено. Змерджи main → lesson-8-9, і Argo CD підхопить зміни.' }
    failure { echo '❌ Перевір логи: найчастіше це git/SSH/known_hosts або помилка Kaniko.' }
  }
}
