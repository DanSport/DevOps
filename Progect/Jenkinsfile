pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins-sa
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: git-tools
      image: public.ecr.aws/bitnami/git:2.45.2
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      resources:
        requests: { cpu: "50m",  memory: "64Mi" }
        limits:   { cpu: "500m", memory: "256Mi" }

    - name: aws
      image: amazon/aws-cli:2.17.48
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      resources:
        requests: { cpu: "50m", memory: "64Mi" }
        limits:   { cpu: "500m", memory: "256Mi" }

    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      # ВАЖЛИВО: тримаємо контейнер живим реальним шеллом BusyBox
      command: ["/busybox/sh", "-c", "while true; do sleep 3600; done"]
      tty: false
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      resources:
        requests: { cpu: "100m", memory: "128Mi" }
        limits:   { cpu: "1",    memory: "1Gi" }

    - name: jnlp
      image: jenkins/inbound-agent:3327.v868139a_d00e0-6
      args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
      env:
        - name: JENKINS_URL
          value: "http://jenkins.jenkins.svc.cluster.local:80/"
        - name: JENKINS_TUNNEL
          value: "jenkins-agent.jenkins.svc.cluster.local:50000"
      resources:
        requests: { cpu: "100m", memory: "256Mi" }
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
'''
      defaultContainer 'git-tools'
    }
  }

  options {
    skipDefaultCheckout(true)
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    AWS_REGION    = 'us-east-1'
    ECR_URI       = '785434010839.dkr.ecr.us-east-1.amazonaws.com/lesson-7-ecr'
    APP_NAME      = 'django-app'
    GITOPS_BRANCH = 'main'
    VALUES_FILE   = 'Progect/charts/django-app/values.yaml'
    GIT_SSH_URL   = 'git@github.com:DanSport/DevOps.git'
  }

  stages {
    stage('Checkout (pipeline repo)') {
      steps {
        checkout scm
        sh '''
set -eu
git --version
git config --global --add safe.directory "$WORKSPACE" || true
git rev-parse --short HEAD || true
'''
      }
    }

    stage('ECR Login (create docker config)') {
      steps {
        container('aws') {
          sh '''
set -eu
mkdir -p "$WORKSPACE/.docker"

ECR_REGISTRY="$(echo "$ECR_URI" | awk -F/ '{print $1}')"
TOKEN="$(aws ecr get-login-password --region "$AWS_REGION")"

cat > "$WORKSPACE/.docker/config.json" <<JSON
{
  "auths": {
    "${ECR_REGISTRY}": {
      "username": "AWS",
      "password": "${TOKEN}"
    }
  }
}
JSON
ls -la "$WORKSPACE/.docker" || true
'''
        }
      }
    }

    stage('Build & Push (Kaniko)') {
      steps {
        container('kaniko') {
          // без bash та pipefail (BusyBox sh сумісний)
          sh '''
set -eu

# Переконаймось, що Jenkins tmp доступний (debug)
mkdir -p "$WORKSPACE/@tmp" || true

# Kaniko шукає конфіг тут:
mkdir -p /kaniko/.docker
if [ -f "$WORKSPACE/.docker/config.json" ]; then
  cp "$WORKSPACE/.docker/config.json" /kaniko/.docker/config.json
fi

TAG="build-${BUILD_NUMBER}"

# Трошки дебагу, якщо раптом знову впаде
ls -la /bin || true
ls -la /busybox || true
id || true
pwd
ls -la "$WORKSPACE" || true

/kaniko/executor \
  --context="$WORKSPACE" \
  --dockerfile=Dockerfile \
  --destination="${ECR_URI}:${TAG}" \
  --cache=false

echo "${TAG}" > .image_tag
'''
        }
      }
    }

    stage('Bump Helm values & Push') {
      steps {
        container('git-tools') {
          withCredentials([sshUserPrivateKey(credentialsId: 'gitops-ssh',
                                            keyFileVariable: 'SSH_KEY',
                                            usernameVariable: 'SSH_USER')]) {
            sh '''
set -eu

TAG="$(cat .image_tag)"
[ -n "$TAG" ] || { echo "TAG is empty"; exit 1; }

mkdir -p ~/.ssh
chmod 700 ~/.ssh
ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts
chmod 644 ~/.ssh/known_hosts

workdir="$(mktemp -d)"
git -c core.sshCommand="ssh -i $SSH_KEY -o StrictHostKeyChecking=accept-new" \
  clone --depth 1 --branch "${GITOPS_BRANCH}" "${GIT_SSH_URL}" "$workdir/repo"
cd "$workdir/repo"

git config user.name  "Jenkins CI"
git config user.email "ci@local"

# оновлюємо тільки значення tag: у потрібному values.yaml
sed -E -i 's|(^[[:space:]]*tag:[[:space:]]*).*$|\\1'"${TAG}"'|' "${VALUES_FILE}"

git add "${VALUES_FILE}" || true
git diff --cached --quiet && { echo "No changes to commit"; exit 0; }
git commit -m "chore(ci): bump image tag to ${TAG} [skip ci]"

GIT_SSH_COMMAND="ssh -i $SSH_KEY -o StrictHostKeyChecking=accept-new" \
  git push origin "${GITOPS_BRANCH}"
'''
          }
        }
      }
    }
  }

  post {
    success { echo '✅ Образ у ECR запушено і bump у гілці виконано. Argo CD підхопить коміт.' }
    failure { echo '❌ Дивись логи стадій (Checkout / ECR login / Kaniko / Push у Git).' }
  }
}
