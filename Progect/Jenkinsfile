pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  serviceAccountName: jenkins-sa
  volumes:
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: git-tools
      image: public.ecr.aws/bitnami/git:2.45.2
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      resources:
        requests: { cpu: "50m",  memory: "64Mi" }
        limits:   { cpu: "500m", memory: "256Mi" }

    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
      resources:
        requests: { cpu: "100m", memory: "128Mi" }
        limits:   { cpu: "1",    memory: "1Gi" }

    # ЯВНО визначаємо jnlp і задаємо тунель на сервіс agent’ів
    - name: jnlp
      image: jenkins/inbound-agent:3327.v868139a_d00e0-6
      args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
      env:
        - name: JENKINS_URL
          value: "http://jenkins.jenkins.svc.cluster.local:80/"
        - name: JENKINS_TUNNEL
          value: "jenkins-agent.jenkins.svc.cluster.local:50000"
      resources:
        requests: { cpu: "100m", memory: "256Mi" }
      volumeMounts:
        - name: workspace-volume
          mountPath: /home/jenkins/agent
"""
      defaultContainer 'git-tools'
    }
  }

  environment {
    AWS_REGION    = 'us-east-1'
    ECR_URI       = '785434010839.dkr.ecr.us-east-1.amazonaws.com/lesson-7-ecr'
    APP_NAME      = 'django-app'
    GITOPS_BRANCH = 'main'
    VALUES_FILE   = 'Progect/charts/django-app/values.yaml'
    GIT_SSH_URL   = 'git@github.com:DanSport/DevOps.git'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh '''
          set -euxo pipefail
          git --version
          git rev-parse --short HEAD || true
        '''
      }
    }

    stage('Build & Push (Kaniko)') {
      steps {
        container('kaniko') {
          sh '''
            set -euxo pipefail
            TAG="build-${BUILD_NUMBER}"
            /kaniko/executor \
              --context="$WORKSPACE" \
              --dockerfile=Dockerfile \
              --destination="${ECR_URI}:${TAG}" \
              --destination="${ECR_URI}:latest" \
              --cache=true --snapshotMode=redo
            echo "${TAG}" > .image_tag
          '''
        }
      }
    }

    stage('Bump Helm values & Push') {
      steps {
        container('git-tools') {
          sshagent (credentials: ['gitops-ssh']) {
            sh '''
              set -euxo pipefail
              mkdir -p ~/.ssh && chmod 700 ~/.ssh
              ssh-keyscan -t ed25519 github.com >> ~/.ssh/known_hosts
              chmod 644 ~/.ssh/known_hosts

              TAG="$(cat .image_tag)"

              git remote set-url origin "${GIT_SSH_URL}"
              git fetch origin "${GITOPS_BRANCH}"
              git checkout "${GITOPS_BRANCH}"

              sed -i.bak -E "s#^(\\s*tag:\\s*).*#\\1${TAG}#g" "${VALUES_FILE}" && rm -f "${VALUES_FILE}.bak"

              git config user.email "ci@local"
              git config user.name  "jenkins-ci"
              git add "${VALUES_FILE}" || true
              git commit -m "ci: bump ${APP_NAME} image tag to ${TAG} [skip ci]" || echo "No changes to commit"
              git push origin "${GITOPS_BRANCH}"
            '''
          }
        }
      }
    }
  }

  post {
    success { echo '✅ Образ у ECR і values.yaml оновлено. Змерджи main → lesson-8-9, щоб Argo CD підхопив.' }
    failure { echo '❌ Перевір логи: здебільшого це тунель/SSH або Kaniko.' }
  }
}
