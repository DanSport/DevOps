pipeline {
  agent {
    kubernetes {
      label 'default'                 // один і той же label, що в Pod Template
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/role: agent
spec:
  serviceAccountName: jenkins
  restartPolicy: Never
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:3301.v4363ddcca_4e7-1
    args: ['\$(computer.jnlpmac)', '\$(computer.name)']
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.23.2
    imagePullPolicy: Always
    command: ['sleep']
    args: ['infinity']
    workingDir: /workspace
"""
    }
  }

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
  }

  environment {
    // Щоб не залежати від Jenkins Credentials — підставимо явні значення
    AWS_REGION = 'us-east-1'
    ECR_URI    = '785434010839.dkr.ecr.us-east-1.amazonaws.com/lesson-7-ecr'

    SAFE_BRANCH = "${env.BRANCH_NAME?.replaceAll(/[^A-Za-z0-9_.-]/, '-') ?: 'main'}"
    IMAGE_TAG   = "${SAFE_BRANCH}-${env.BUILD_NUMBER ?: '0'}"

    GITOPS_REPO_SSH   = 'git@github.com:DanSport/DevOps.git'
    GITOPS_BRANCH     = 'main'                 // змінюй на 'lesson-8-9' якщо треба
    GITOPS_CHART_PATH = 'Progect/charts/django-app'
    GIT_CRED_ID       = 'gitops-ssh'
  }

  stages {
    stage('Checkout source') {
      steps {
        checkout scm
        sh 'git config --global --add safe.directory "$PWD"'
      }
    }

    stage('Build & Push (Kaniko → ECR)') {
      steps {
        container('kaniko') {
          sh '''#!/usr/bin/env bash
            set -euo pipefail

            test -f Dockerfile || { echo "❌ Dockerfile not found"; exit 1; }

            /kaniko/executor \
              --context="$PWD" \
              --dockerfile="$PWD/Dockerfile" \
              --destination="${ECR_URI}:${IMAGE_TAG}" \
              --destination="${ECR_URI}:latest" \
              --single-snapshot \
              --cache=true \
              --cache-ttl=48h
          '''
        }
      }
    }

    stage('Clone GitOps & Bump tag') {
      steps {
        sshagent (credentials: [env.GIT_CRED_ID]) {
          sh '''#!/usr/bin/env bash
            set -euo pipefail

            rm -rf gitops && mkdir -p gitops
            git clone --branch "${GITOPS_BRANCH}" --depth 1 "${GITOPS_REPO_SSH}" gitops

            values_file="gitops/${GITOPS_CHART_PATH}/values.yaml"
            test -f "$values_file" || { echo "❌ $values_file not found"; exit 1; }

            if command -v yq >/dev/null 2>&1; then
              yq -i ".image.tag = \\"${IMAGE_TAG}\\"" "$values_file" || true
              yq -i "(.tag // .image.tag) = \\"${IMAGE_TAG}\\"" "$values_file" || true
            else
              sed -i -E 's|^([[:space:]]*tag:[[:space:]]*).*$|\\1"'"${IMAGE_TAG}"'"|' "$values_file" || true
              sed -i -E 's|^([[:space:]]*image:[[:space:]]*\\{?[[:space:]]*tag:[[:space:]]*).*$|\\1"'"${IMAGE_TAG}"'"|' "$values_file" || true
            fi

            pushd gitops
              git config user.email "ci@local"
              git config user.name  "jenkins-ci"
              git add "${GITOPS_CHART_PATH}/values.yaml" || true

              if ! git diff --cached --quiet; then
                git commit -m "ci: bump image tag to ${IMAGE_TAG}"
                git push origin "${GITOPS_BRANCH}"
              else
                echo "ℹ️ nothing to commit (tag unchanged)"
              fi
            popd
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pushed ${ECR_URI}:${IMAGE_TAG} and updated ${GITOPS_REPO_SSH}:${GITOPS_BRANCH}"
    }
    failure {
      echo "❌ Pipeline failed. Check the logs."
    }
  }
}
